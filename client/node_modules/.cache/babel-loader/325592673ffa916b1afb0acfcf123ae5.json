{"ast":null,"code":"var _jsxFileName = \"/Users/ellishammer/Desktop/fullstack_app/client/src/App.js\";\nimport React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(date => data.json()).then(rest => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idToDelete => {\n      parseInt(idToDelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idToDelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is get all existing data in our db\n  // then we add polling logic so that we can check if our db has changed\n  // so we can add those changes into the UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process every time we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // in the frontend, we use the id key of our data object\n  // to identify which we want to update or delete\n  // for the backend, we use the object id from Mongo to modify\n  // the db entries\n  // first get moethod that uses the backend API\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, data.length <= 0 ? 'NO DB ENTRIES YET' : data.map(dat => /*#__PURE__*/React.createElement(\"li\", {\n      style: {\n        padding: '10px'\n      },\n      key: data.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 19\n      }\n    }, \" id: \"), \" \", dat.id, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 73\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: 'gray'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }, \" data: \"), dat.message))), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.setState({\n        message: e.target.value\n      }),\n      placeholder: \"add something in the database\",\n      style: {\n        width: '200px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.putDataToDB(this.state.message),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, \"ADD\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToDelete: e.target.value\n      }),\n      placeholder: \"put id of item to delete here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.deleteFromDB(this.state.idToDelete),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, \"DELETE\")), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        padding: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        idToUpdate: e.target.value\n      }),\n      placeholder: \"id of item to update here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      style: {\n        width: '200px'\n      },\n      onChange: e => this.setState({\n        updateToApply: e.target.value\n      }),\n      placeholder: \"put new value of the item here\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.updateDB(this.state.idToUpdate, this.state.updateToApply),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }, \"UPDATE\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ellishammer/Desktop/fullstack_app/client/src/App.js"],"names":["React","Component","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","date","json","rest","setState","res","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","length","padding","color","e","target","value","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // when component mounts, first thing it does is get all existing data in our db\n  // then we add polling logic so that we can check if our db has changed\n  // so we can add those changes into the UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process every time we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n\n  // in the frontend, we use the id key of our data object\n  // to identify which we want to update or delete\n  // for the backend, we use the object id from Mongo to modify\n  // the db entries\n\n  // first get moethod that uses the backend API\n  getDataFromDb = () => {\n    fetch('http://localhost:3001/api/getData')\n    .then((date) => data.json())\n    .then((rest) => this.setState({ data: res.data }));\n  };\n\n  // put method\n  putDataToDB = (message) => {\n    let currentIds = this.state.data.map((data) => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post('http://localhost:3001/api/putData', {\n      id: idToBeAdded,\n      message: message,\n    });\n  };\n\n\n  // delete method, duh\n  deleteFromDB = (idToDelete) => {\n    parseInt(idToDelete);\n    let objIdToDelete = null;\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToDelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete('http://localhost:3001/api/deleteData', {\n      data: {\n        id: objIdToDelete\n      },\n    });\n  };\n\n  // update boa\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach((dat) => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post('http://localhost:3001/api/updateData', {\n      id: objIdToUpdate,\n      update: { message: updateToApply },\n    });\n  };\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <div>\n        <ul>\n          {data.length <= 0\n            ? 'NO DB ENTRIES YET'\n            : data.map((dat) => (\n                <li style={{ padding: '10px' }} key={data.message}>\n                  <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                  <span style={{ color: 'gray' }}> data: </span>\n                  {dat.message}\n                </li>\n              ))}\n        </ul>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            onChange={(e) => this.setState({ message: e.target.value })}\n            placeholder=\"add something in the database\"\n            style={{ width: '200px' }}\n          />\n          <button onClick={() => this.putDataToDB(this.state.message)}>\n            ADD\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToDelete: e.target.value })}\n            placeholder=\"put id of item to delete here\"\n          />\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n            DELETE\n          </button>\n        </div>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={(e) => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button\n            onClick={() =>\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n            }\n          >\n            UPDATE\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}